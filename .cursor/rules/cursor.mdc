---
alwaysApply: true
---

# Project Overview

This project is `flashdeck.dev` — a web-based flashcard platform for learning JavaScript theory using spaced repetition.

- Built with Next.js, TypeScript, Tailwind, and shadcn/ui
- Uses convex for auth and database (RLS enabled)
- Implements a custom spaced repetition engine (Anki-style SRS)
- Users get a free 5-day trial, then pay $34/year for full access
- The app tracks user flashcard progress and schedules next reviews
-

# FlashDeck Project MDC Rules

# General

- Use TypeScript syntax conventions and full type annotations when possible.
- Tailwind CSS should follow utility-first principles — avoid deeply nested class strings.
- Only use `async/await` with Supabase queries or API calls.
- Maintain minimal and clear logic in server and client components.

# Auth (Supabase)

- Do not modify Supabase auth logic in `lib/supabase.ts` unless explicitly asked.
- `session` and `user` data should be securely fetched on the server where possible.
- Protect RLS-sensitive queries with `auth.uid()` usage.

# Flashcard Logic

- Do not modify the spaced repetition algorithm (`easeFactor`, `interval`, `nextReviewAt`) unless explicitly requested.
- Use `user_flashcard_attempts` table responsibly — never expose internal SRS logic in the UI.
- When fetching flashcards, preserve the "due only" logic based on `nextReviewAt <= now()`.

# Stripe Billing

- Never expose `STRIPE_SECRET_KEY` or other private env vars to the client.
- Keep Stripe logic in `/app/api/stripe/` endpoints only.
- Ensure `trial_expires_at` and `pro` flags are enforced before allowing flashcard review.

# UI & Components (shadcn/ui)

- Use [shadcn/ui](https://ui.shadcn.com/) components where available. Do not manually re-implement common UI patterns like `Dialog`, `Button`, or `Card`.
- Custom components should follow shadcn structure and naming.
- If modifying a `shadcn` component wrapper, keep its API consistent with the original.

# Frontend (Next.js + Tailwind)

- Place UI elements inside `/components/` or `/components/ui/` as appropriate.
- Ensure layouts are responsive — prioritize mobile-first styles.
- Reuse layout components and typography primitives.

# API

- Validate all inputs to `/api/*` endpoints.
- Use Zod or manual checks before writing to the database.
- Always protect Supabase data writes/reads with role checks or `auth.uid()` logic.

# Don’t Touch

- Do not modify:
  - `/supabase/migrations/`
  - `.env.*` files
  - Spaced repetition engine file (unless instructed)
  - Stripe webhook logic

# FlashDeck Project MDC Rules

# General

- Use TypeScript syntax conventions and full type annotations when possible.
- Tailwind CSS should follow utility-first principles — avoid deeply nested class strings.
- Only use `async/await` with Supabase queries or API calls.
- Maintain minimal and clear logic in server and client components.

# Auth (Supabase)

- Do not modify Supabase auth logic in `lib/supabase.ts` unless explicitly asked.
- `session` and `user` data should be securely fetched on the server where possible.
- Protect RLS-sensitive queries with `auth.uid()` usage.

# Flashcard Logic

- Do not modify the spaced repetition algorithm (`easeFactor`, `interval`, `nextReviewAt`) unless explicitly requested.
- Use `user_flashcard_attempts` table responsibly — never expose internal SRS logic in the UI.
- When fetching flashcards, preserve the "due only" logic based on `nextReviewAt <= now()`.

# Stripe Billing

- Never expose `STRIPE_SECRET_KEY` or other private env vars to the client.
- Keep Stripe logic in `/app/api/stripe/` endpoints only.
- Ensure `trial_expires_at` and `pro` flags are enforced before allowing flashcard review.

# UI & Components (shadcn/ui)

- Use [shadcn/ui](https://ui.shadcn.com/) components where available. Do not manually re-implement common UI patterns like `Dialog`, `Button`, or `Card`.
- Custom components should follow shadcn structure and naming.
- If modifying a `shadcn` component wrapper, keep its API consistent with the original.

# Frontend (Next.js + Tailwind)

- Place UI elements inside `/components/` or `/components/ui/` as appropriate.
- Ensure layouts are responsive — prioritize mobile-first styles.
- Reuse layout components and typography primitives.

# API

- Validate all inputs to `/api/*` endpoints.
- Use Zod or manual checks before writing to the database.
- Always protect Supabase data writes/reads with role checks or `auth.uid()` logic.

# Don’t Touch

- Do not modify:
  - `/supabase/migrations/`
  - `.env.*` files
  - Spaced repetition engine file (unless instructed)
  - Stripe webhook logic
